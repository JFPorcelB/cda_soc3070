1/27
## valores posibles
valores_posibles <- c(1,0) # 1 cara, 0 for sello
## Muestreso aleatorio de valores posibles
flip <- sample(possible_values, # vector
size=1000000, # 1 million de veces
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # modeda justa
## Muestreso aleatorio de valores posibles
flip <- sample(valores_posibles, # vector
size=1000000, # 1 million de veces
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # modeda justa
prop.table(table(flip)) # table de proporciones
mean(flip)  # media
var(flip)  # varianza
## Illustration from Chapter 2
star <- read.csv("STAR.csv") # reads and stores data
star <- read.csv("STAR.csv") # reads and stores data
hist(star$reading, freq=FALSE) # creates density histogram
View(star)
star %>%
ggplot(aes(x=reading)) +
geom_histogram()
library(tidyverse)
library(tidyverse)
star <- read.csv("STAR.csv") # reads and stores data
star %>% # histograma
ggplot(aes(x=reading)) +
geom_histogram()
hist(star$reading, freq=FALSE) # creates density histogram
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
hist(star$reading, freq=FALSE)
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_bw()
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
x <- rnorm(1000000, # tamaño de muestra
mean=3, # media
sd=2) # desviación estándar
hist(x, freq=FALSE) # histograma
x %>%
ggplot(aes(x = x)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
ggplot() + geom_histogram(aes(x))
ggplot(aes(x = x)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
ggplot() + aes(x)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
#hist(x, freq=FALSE) #rbase
mean(x) # media
var(x) # varianza
# plot vector
ggplot() + aes(x)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
pnorm(-1.96) # probabilidad de Z menor o igual a -1,96
1 - pnorm(1.96) # probabilidad de Z mayor o igual a 1,96
pnorm(1.96) - pnorm(-1.96) # probabilidad de Z entre -1,96 y 1,96
pnorm(-1.96) # probabilidad de Z menor o igual a -1,96
1 - pnorm(1.96) # probabilidad de Z mayor o igual a 1,96
pnorm(1.96) - pnorm(-1.96) # probabilidad de Z entre -1,96 y 1,96
## Cómo transformar una variable aleatoria normal en la variable aleatoria normal estándar
## creamos una variable aleatoria y estadarizamos
z <- (x - 3) / 2 # estarizamos x
# plot vector
ggplot() + aes(z)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
# plot vector
ggplot() + aes(z)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
hist(z, freq=FALSE) # creates density histogram
#hist(z, freq=FALSE) # rbase
mean(z) # media
var(z) # varianza
pnorm(6.92, mean=3, sd=2) -
pnorm(-0.92, mean=3, sd=2)
## Ejemplo con una variable aleatoria binaria
## Crear muestreos aleatorios a partir de una variable aleatoria
sample_1 <- sample(c(1,0), # valores posibles
size=10, # n=10
replace=TRUE, # con reemplazo
prob=c(0.6,0.4)) # probabilidades
sample_2 <- sample(c(1,0),
size=1000, # n=1,000
replace=TRUE,
prob=c(0.6,0.4))
sample_3 <- sample(c(1,0),
size=1000000, # n=1,000,000
replace=TRUE,
prob=c(0.6,0.4))
## Calcular medias muestrales
mean(support_sample_1) # n=10
## Ejemplo con una variable aleatoria binaria
## Crear muestreos aleatorios a partir de una variable aleatoria
sample_1 <- sample(c(1,0), # valores posibles
size=10, # n=10
replace=TRUE, # con reemplazo
prob=c(0.6,0.4)) # probabilidades
sample_2 <- sample(c(1,0),
size=1000, # n=1,000
replace=TRUE,
prob=c(0.6,0.4))
sample_3 <- sample(c(1,0),
size=1000000, # n=1,000,000
replace=TRUE,
prob=c(0.6,0.4))
## Calcular medias muestrales
mean(sample_1) # n=10
mean(sample_2) # n=1,000
mean(sample_3) # n=1,000,000
# plot vector
ggplot() + aes(z)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
#hist(z, freq=FALSE) # rbase
mean(z) # media
var(z) # varianza
## Ejemplo con una variable aleatoria binaria
## Crear un vector vacío para guardar medias de muestras estandarizadas
sd_medias_muestrales <- c()
## ejecutar un loop con 10000 iteraciones
for(i in 1:10000){
## Crear un muestreo aleatorio con 1000 observaciones.
## Con una variable binaria con p=0.6
respaldo_sample <- sample(c(1,0), # valores posibles
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.6,0.4)) # probabilidades
## Calcular y guardar la media muestral estandarizada
sd_medias_muestrales[i] <-
(mean(respaldo_sample) - 0.60)/sqrt(0.24 / 1000)
}
## Create density histogram
hist(sd_medias_muestrales, freq=FALSE)
## Create density histogram
# plot vector
ggplot() + aes(sd_medias_muestrales)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
## Ejecute un bucle `for` simple con 3 iteraciones
## imprimir el valor de i en cada iteración
for(i in 1:3){
print(i) # imprimir en valor de i
}
for(i in 1:3){
## muestreo aleatorio of 1,000 observaciones
## de una variable binaria con p=0.5
flip <- sample(c(1,0), # posibles valores
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## Imprimir
print(mean(flip))
}
for(i in 1:3){
## muestreo aleatorio of 1,000 observaciones
## de una variable binaria con p=0.5
flip <- sample(c(1,0), # posibles valores
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## Imprimir
print(mean(flip))
}
for(i in 1:100){
## muestreo aleatorio of 1,000 observaciones
## de una variable binaria con p=0.5
flip <- sample(c(1,0), # posibles valores
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## Imprimir
print(mean(flip))
}
for(i in 1:3){
## muestreo aleatorio of 1,000 observaciones
## de una variable binaria con p=0.5
flip <- sample(c(1,0), # posibles valores
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## Imprimir
print(mean(flip))
}
## revisar el contenido de `sample_means`
sample_means
## Crear un vector vacío
sample_means <- c()
## loop 3 iteraciones
for(i in 1:3){
## extraer una muestra aleatoria de 1000 observaciones
## de una variable binaria con p=0,5
flip <- sample(c(1,0), # valores posibles
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## guardar
sample_means[i] <- mean(flip)
}
## revisar el contenido de `sample_means`
sample_means
for(i in 1:10000){
## muestreo de 1,000 observaciones
## para una variable binaria con p=0.5
flip <- sample(c(1,0), # valores posibles
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## store sample mean
sample_means[i] <- mean(flip)
}
sample_means
x <- 3
for (i in 1:3) {
print(x)
if(x%%2 == 0){
x <- x/2
}
else{
x <- 3*x + 1
}
}
print(x)
for (i in 1:3) {
print(x)
if(x%%2 == 0){
x <- x/2
}
else{
x <- 3*x + 1
}
}
x <- 1:5
x <- 1:5
y <- c()
for(i in 1:5){
y[i] <- x[i]^2
}
y
x <- 1:5
y <- x^2
y
library(RCurl)
star <- getURL("https://github.com/mebucca/cda_soc3070/blob/gh-pages/ayudantia/02_prob/STAR.csv")
star <- read.csv(text = star)
View(star)
star <- read.csv("STAR.csv") # datos
# Carga el archivo CSV desde la URL cruda
url <- "https://raw.githubusercontent.com/mebucca/cda_soc3070/gh-pages/ayudantia/02_prob/STAR.csv"
star <- readr::read_csv(url)
View(star)
#star <- read.csv("STAR.csv") # datos
url <- "https://raw.githubusercontent.com/mebucca/cda_soc3070/gh-pages/ayudantia/02_prob/STAR.csv"
star <- readr::read_csv(url)
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
library(tidyverse)
library(readr)
#star <- read.csv("STAR.csv") # datos
url <- "https://raw.githubusercontent.com/mebucca/cda_soc3070/gh-pages/ayudantia/02_prob/STAR.csv"
star <- readr::read_csv(url)
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
# hist(star$reading, freq=FALSE) # con r base
#star <- read.csv("STAR.csv") # datos
url <- "https://raw.githubusercontent.com/mebucca/cda_soc3070/gh-pages/ayudantia/02_prob/STAR.csv"
star <- readr::read_csv(url)
View(star)
## valores posibles
valores_posibles <- c(1,0) # 1 cara, 0 for sello
## Muestreso aleatorio de valores posibles
flip <- sample(valores_posibles, # vector
size=1000000, # 1 million de veces
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # modeda justa
prop.table(table(flip)) # table de proporciones
mean(flip)  # media
var(flip)  # varianza
#star <- read.csv("STAR.csv") # datos
url <- "https://raw.githubusercontent.com/mebucca/cda_soc3070/gh-pages/ayudantia/02_prob/STAR.csv"
star <- readr::read_csv(url)
glimpse(star)
ggplot(star, aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
hist(star$reading, freq=FALSE) # con r base
# Histograma con densidad
star %>%
ggplot(aes(x = reading)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
x <- rnorm(1000000, # tamaño de muestra
mean=3, # media
sd=2) # desviación estándar
# plot vector
ggplot() +
aes(x)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
#hist(x, freq=FALSE) #rbase
mean(x) # media
var(x) # varianza
pnorm(-1.96) # probabilidad de Z menor o igual a -1,96
1 - pnorm(1.96) # probabilidad de Z mayor o igual a 1,96
pnorm(1.96) - pnorm(-1.96) # probabilidad de Z entre -1,96 y 1,96
## Cómo transformar una variable aleatoria normal en la variable aleatoria normal estándar
## creamos una variable aleatoria y estadarizamos
z <- (x - 3) / 2 # estarizamos x
z
z
# plot vector
ggplot() +
aes(z)+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white", bins=30) +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25) +
theme_grey()
#hist(z, freq=FALSE) # rbase
mean(z) # media
var(z) # varianza
pnorm(6.92, mean=3, sd=2) - pnorm(-0.92, mean=3, sd=2)
sample_1 <- sample(c(1,0), # valores posibles
size=10, # n=10
replace=TRUE, # con reemplazo
prob=c(0.6,0.4)) # probabilidades
sample_1 <- sample(c(1,0), # valores posibles
size=10, # n=10
replace=TRUE, # con reemplazo
prob=c(0.6,0.4)) # probabilidades
sample_2 <- sample(c(1,0),
size=1000, # n=1,000
replace=TRUE,
prob=c(0.6,0.4))
sample_3 <- sample(c(1,0),
size=1000000, # n=1,000,000
replace=TRUE,
prob=c(0.6,0.4))
## Calcular medias muestrales
mean(sample_1) # n=10
mean(sample_2) # n=1,000
mean(sample_3) # n=1,000,000
h_sample_1 <- rnorm(10, # n=10
mean=67, # población media = 67
sd=sqrt(14)) # varianza poblacional = 14
h_sample_2 <- rnorm(1000, # n=1,000
mean=67,
sd=sqrt(14))
h_sample_3 <- rnorm(1000000, # n=1,000,000
mean=67,
sd=sqrt(14))
## Calcular medias muestrales
mean(h_sample_1) # n=10
mean(h_sample_2) # n=1,000
mean(h_sample_3) # n=1,000,000
x <- 1:5
y <- c()
for(i in 1:5){
y[i] <- x[i]^2
}
y
x <- 1:5
y <- x^2
y
for(i in 1:3){
print(i) # imprimir en valor de i
}
print(i) # imprimir en valor de i
for(i in 1:3){
print(i) # imprimir en valor de i
}
for(i in 1:3){
## muestreo aleatorio of 1,000 observaciones
## de una variable binaria con p=0.5
flip <- sample(c(1,0), # posibles valores
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## Imprimir
print(mean(flip))
}
## Crear un vector vacío
sample_means <- c()
## loop 3 iteraciones
for(i in 1:3){
## extraer una muestra aleatoria de 1000 observaciones
## de una variable binaria con p=0,5
flip <- sample(c(1,0), # valores posibles
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## guardar
sample_means[i] <- mean(flip)
}
## revisar el contenido de `sample_means`
sample_means
for(i in 1:10000){
## muestreo de 1,000 observaciones
## para una variable binaria con p=0.5
flip <- sample(c(1,0), # valores posibles
size=1000, # n=1,000
replace=TRUE, # con reemplazo
prob=c(0.5,0.5)) # probabilidades
## store sample mean
sample_means[i] <- mean(flip)
}
# revisar vector
sample_means
